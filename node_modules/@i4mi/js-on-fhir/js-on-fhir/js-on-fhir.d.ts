import { HttpMethod } from '@i4mi/fhir_r4';
export declare class JSOnFhir {
    private apiMethods;
    private urls;
    private settings;
    private auth;
    /**
    * Creates a new jsOnFhir object and persists it in the sessionStorage, so it is
    * still available after a page relaunch
    * @param serverUrl        the url of the fhir server, e.g. 'https://test.midata.coop'
    * @param clientId         the id of your fhir application
    * @param redirectUrl      the url where the callback of the oAuth2.0 can be directed
    * @param doesNotNeedAuth? optional parameter. Set to true when the FHIR server you're
    *                         using doesn't require authentification (eg. when connecting to
    *                         the EPD playground via MobileAccessGateway). In this case, the
    *                         parameters clientId and redirectUrl do not matter (but still
    *                         have to be set.)
    */
    constructor(serverUrl: string, clientId: string, redirectUrl: string, doesNotNeedAuth?: boolean);
    /**
    * This function starts the oAuth authentication procedure, by opening the auth
    * page for the user to login to the fhir server.
    * @param params (optional) an Object with key / value pairs
    */
    authenticate(params?: Object): void;
    /**
    * This function handles the response from the authentification server, after the
    * authenticate() function was called. This function has to be called from the
    * page that the redirectUrl (as defined in the constructor) refers to.
    *
    * @return when called after authenticate(): a Promise
    *           - successful:     the response of the server (with token, refresh-token etc.)
    *           - not sucessful:  an error message
    *         when not called after authenticate(): a Promise resolved to NULL
    */
    handleAuthResponse(): Promise<unknown>;
    /**
    * Fetches a new token from the oAuth server, using a given refreshToken, and
    * saves the new auth information
    * @param refreshToken the refreshToken, as received from the response of
    *                     handleAuthResponse()
    * @returns a promise with, when:
    *           - successful:     the response of the server (with token, new refresh-token etc.)
    *           - not sucessful:  an error message
    *           - doesNotNeedAuth set in constructor:
    *                             an empty promise
    */
    refreshAuth(refreshToken: String): Promise<unknown>;
    /**
    * Checks if a token is set and not expired. Will also return false when doesNotNeedAuth
    * was set to true in the constructor.
    * @returns boolean (true if non-expired token set)
    */
    isLoggedIn(): boolean;
    /**
    * Logs out the user by deleting the authentification information
    */
    logout(): void;
    /**
    * Creates a resource on the fhir server
    * @param resource resource to save
    * @returns resolve of resource as JSON if status 200 or 201
    * @returns reject every other case with message
    */
    create(resource: any): Promise<unknown>;
    /**
    * Updates a resource
    * on the fhir server
    * @param resource resource to update
    * @returns resolve of resource as JSON if status 200 or 201
    * @returns reject every other case with message
    */
    update(resource: any): Promise<unknown>;
    /**
    * Searches for one or multiple resources
    * @param resourceType resource type to look up
    * @param params search parameters according fhir resource guide (not mandatory)
    * @returns resolve of resource as JSON if status 200 or 201
    * @returns reject every other case with message
    */
    search(resourceType: any, params?: any): Promise<unknown>;
    /**
    * Processes a message on the fhir server
    * @param message A Bundle with all the properties of a message
    * @returns the response of the server if successful
    * @returns reject every other case with message
    * @deprecated use processOperation instead
    */
    processMessage(message: any): Promise<unknown>;
    /**
    * Performs a given operation on the server.
    * @param operation the type of the operation, for example process-message
    * @param payload a Resource or other payload to process in the operation (optional)
    * @param httpMethod the HTTP method to use (GET|POST|PUT|DELETE) (optional)
    * @param params parameters, either as key/value pair or as a string (optional)
    * @param resourceType specify the type of Resources the operation should be performed on (optional, mandatory when using resourceId)
    * @param resourceId specify an instance of a Resource the operation should be performed on (optional)
    * @returns the response of the server if successful
    * @returns reject every other case with message
    */
    performOperation(operation: string, payload?: any, httpMethod?: HttpMethod, params?: any, resourceType?: string, resourceId?: string): Promise<unknown>;
    /**
    * Sets the language for the auth window
    * @param lang the language as two-char string (eg. 'de', 'en', 'fr' or 'it')
    * @throws error if the given language string is not
    */
    setLanguage(lang: string): void;
    /**
    * Sets the conformance url, in cases when it differentiates from the default /metadata
    * @param conformanceUrl the new url
    */
    setConformanceUrl(conformanceUrl: string): void;
    /**
    * Sets the scope, for when it differs from the default 'user/*.*'
    * @param scope the scope as string
    */
    setScope(scope: string): void;
    /**
    * Returns the resource id of the Patient resource of the logged in user
    * @return the Patient Resource ID as a string, if logged in
    * @return undefined if not logged in
    */
    getPatient(): string;
    /**
    * Generates random state string with given length
    * If length is set to 0, it will take 122
    * @param length length of the string to generate
    * @return the generated state
    */
    generateRandomState(length: number): string;
    /**
    * Makes api call to get the auth and token url
    * from the fhir/midatata of the server.
    * Returns a json response with a resource in the .body
    * Rejects the original error if one occures
    */
    fetchConformanceStatement(): Promise<any>;
    /**
    * Returns the current access token, if available.
    */
    getAccessToken(): string;
    /**
    * function that interprets the result of the api request
    */
    private interpretConformanceStatementResponse;
    /**
    ** Helper function for saving the relevant data from an auth request
    * @param response the response object from a auth or authrefresh request
    */
    private interpretAuthResponse;
    /**
    * helper function that saves the whole object to sessionStorage,
    * so it can be restored after a page reload (e.g. after authenticate())
    */
    private persistMe;
    /**
    * Helper function for reacting to errors, like for example expired token.
    */
    private handleError;
}
